/*
TeenyGPSEmulate.h - Header file for the TeenyGPSEmulate Arduino Library.
Copyright (C) *** Need copyright statement here ***

This program is free software: you can redistribute it and/or modify
it under the terms of the version 3 GNU General Public License as
published by the Free Software Foundation.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

/********************************************************************/
// UBX Packet Format (8 bytes + payload)
/********************************************************************/
// UBX_SYNCH_1,UBX_SYNCH_2,MSGCLASS,MSGID,PAYLOADLENGTHLSB,PAYLOADLENGTHMSB,PAYLOAD[],CKA,CKB

/********************************************************************/
// UBX Packet Struct
/********************************************************************/
struct ubxPacket {
  uint8_t cls;
  uint8_t id;
  uint16_t len;          // Length of the payload. Does not include cls, id, or checksum bytes
  uint16_t counter;      // Keeps track of number of overall bytes received. Some responses are larger than 255 bytes.
  uint16_t startingSpot; // The counter value needed to go past before we begin recording into payload array
  uint8_t *payload;      // We will allocate RAM for the payload if/when needed.
  uint8_t checksumA;     // Given to us from module. Checked against the rolling calculated A/B checksums.
  uint8_t checksumB;
  sfe_ublox_packet_validity_e valid;           // Goes from NOT_DEFINED to VALID or NOT_VALID when checksum is checked
  sfe_ublox_packet_validity_e classAndIDmatch; // Goes from NOT_DEFINED to VALID or NOT_VALID when the Class and ID match the requestedClass and requestedID
};

  uint16_t ubxFrameCounter; // Count all UBX frame bytes. [Fixed header(2bytes), CLS(1byte), ID(1byte), length(2bytes), payload(x bytes), checksums(2bytes)]
  uint8_t rollingChecksumA; // Rolls forward as we receive incoming bytes. Checked against the last two A/B checksum bytes
  uint8_t rollingChecksumB; // Rolls forward as we receive incoming bytes. Checked against the last two A/B checksum bytes

/********************************************************************/
// UBX Packet Frame Headers
/********************************************************************/
const uint8_t COM_PORT_UART1 = 1;
const uint8_t UBX_SYNCH_1   = 0xb5;
const uint8_t UBX_SYNCH_2   = 0x62;
const uint8_t UBX_CLASS_NAV = 0x01;
const uint8_t   UBX_NAV_PVT   = 0x07;
const uint8_t UBX_CLASS_ACK = 0x05;
const uint8_t   UBX_ACK_NAK   = 0x00;
const uint8_t   UBX_ACK_ACK   = 0x01;
const uint8_t UBX_CLASS_CFG = 0x06;
const uint8_t   UBX_CFG_PRT   = 0x00;
const uint8_t   UBX_CFG_MSG   = 0x01;
const uint8_t   UBX_CFG_RATE  = 0x08;
const uint8_t   UBX_CFG_CFG   = 0x09;
const uint8_t   UBX_CFG_NAVX5 = 0x23;
const uint8_t UBX_CLASS_MON = 0x0A;
const uint8_t   UBX_MON_VER   = 0x04;

// 32.8.1 UBX-ACK-ACK (0x05 0x01) Message acknowledged
const uint8_t host_rcvACKACK[10]  = {0xb5,0x62,0x05,0x01,0x02,0x00,0xCL,0xID,0xCA,0xCB}
// 32.8.2 UBX-ACK-NAK (0x05 0x00) Message not acknowledged
const uint8_t host_rcvACKNAK[10]  = {0xb5,0x62,0x05,0x00,0x02,0x00,0xCL,0xID,0xCA,0xCB}

32.10.29 UBX-CFG-RST (0x06 0x04) Reset receiver / Clear backup data structures - No response and no ACK
//Cold start:
const uint8_t host_coldStart[12] = {0xB5,0x62,0x06,0x04,0x04,0x00,0xFF,0xB9,0x02,0x00,0xC8,0x8F}
//Warm start:
const uint8_t host_warmStart[12] = {0xB5,0x62,0x06,0x04,0x04,0x00,0x01,0x00,0x02,0x00,0x11,0x6C}
//Hot start:
const uint8_t host_hotStart[12]  = {0xB5,0x62,0x06,0x04,0x04,0x00,0x00,0x00,0x02,0x00,0x10,0x68}

// 32.10.25 UBX-CFG-PRT (0x06 0x00)
// Poll CFG-PRT COM_PORT_UART1 - Returns CFG-PRT packet and ACK
// Set CFG-PRT COM_PORT_UART1 - Returns ACK only
const uint8_t host_reqCFGPRT[9]   = {0xb5,0x62,0x06,0x00,0x01,0x00,0x01,0x08,0x22}
// Configuration for COM_PORT_UART1
const uint8_t host_setCFGPRT[28]  = {0xb5,0x62,0x06,0x00,0x14,0x00,0x01,0x00,0x00,0x00,
                                     0xc0,0x08,0x00,0x00,0x00,0x96,0x00,0x00,0x07,0x00,
                                     0x01,0x00,0x00,0x00,0x00,0x00,0x81,0x84}
const uint8_t host_ackCFGPRT[10]  = {0xb5,0x62,0x05,0x01,0x02,0x00,0x06,0x00,0x0e,0x37}

// 32.10.18 UBX-CFG-MSG (0x06 0x01)
// Set UBX_NAV_PVT message rate autoPVT=true - Returns ACK only
const uint8_t host_setCFGMSG1[11] = {0xb5,0x62,0x06,0x01,0x03,0x00,0x01,0x07,0x01,0x13,0x51}
// Set UBX_NAV_PVT message rate autoPVT=false - Returns ACK only
const uint8_t host_setCFGMSG0[11] = {0xb5,0x62,0x06,0x01,0x03,0x00,0x01,0x07,0x00,0x12,0x50}
const uint8_t host_ackCFGMSG[10]  = {0xb5,0x62,0x05,0x01,0x02,0x00,0x06,0x01,0x0f,0x38}

// 32.10.27 UBX-CFG-RATE (0x06 0x08) Navigation/measurement rate settings
// Poll UBX-CFG-RATE - Returns CFG-RATE packet and ACK
// Set UBX-CFG-RATE - Returns ACK only
const uint8_t host_reqCFGRATE[8]  = {0xb5,0x62,0x06,0x08,0x00,0x00,0x0e,0x30}
const uint8_t host_setCFGRATE[14] = {0xb5,0x62,0x06,0x08,0x06,0x00,0xe8,0x03,0x01,0x00,
                                      0x01,0x00,0x01,0x39}
const uint8_t host_ackCFGRATE[10] = {0xb5,0x62,0x05,0x01,0x02,0x00,0x06,0x08,0x16,0x3f}

// 32.10.3 UBX-CFG-CFG (0x06 0x09)
// Save configuration
// Set UBX-CFG-RATE - Returns ACK only
const uint8_t host_setCFGCFG[20]  = {0xb5,0x62,0x06,0x09,0x0c,0x00,0x00,0x00,0x00,0x00,
                                     0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x19,0x80}
const uint8_t host_ackCFGCFG[10]  = {0xb5,0x62,0x05,0x01,0x02,0x00,0x06,0x09,0x17,0x40}

// 32.10.20 UBX-CFG-NAVX5 (0x06 0x23)
// Poll CFG-NAVX5 - Returns CFG-NAVX5 packet and ACK
// Set CFG-NAVX5 - Returns ACK only
const uint8_t host_reqCFGNAVX5[8]   = {0xb5,0x62,0x06,0x23,0x00,0x00,0x29,0x81}
// Configuration for CFG-NAVX5
const uint8_t host_setCFGNAVX5[48]  = {0xb5,0x62,0x06,0x23,0x28,0x00,0x02,0x00,0xff,0xff,
                                       0x3f,0x02,0x00,0x00,0x03,0x02,0x03,0x20,0x06,0x00,
                                       0x00,0x01,0x00,0x00,0x4b,0x07,0x00,0x01,0x00,0x00,
                                       0x01,0x01,0x00,0x00,0x00,0x64,0x64,0x00,0x00,0x01,
                                       0x11,0x00,0x00,0x00,0x00,0x00,0xf0,0xd1}
const uint8_t host_ackCFGNAVX5[10]  = {0xb5,0x62,0x05,0x01,0x02,0x00,0x06,0x23,0x31,0x5a}

// 32.17.17 UBX-NAV-PVT (0x01 0x07)
// Poll Navigation position velocity time solution - Returns NAV-PVT packet only - No ACK
const uint8_t host_reqNAVPVT[8]   = {0xb5,0x62,0x01,0x07,0x00,0x00,0x08,0x19}
// Navigation position velocity time solution
const uint8_t host_rcvNAVPVTCold[100] = {0xb5,0x62,0x01,0x07,0x5c,0x00,0x10,0x27,0x00,0x00,
                                         0xdf,0x07,0x0a,0x12,0x00,0x00,0x0a,0xf0,0xff,0xff,
                                         0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x00,
                                         0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
                                         0x00,0x00,0x98,0xbd,0xff,0xff,0xff,0xff,0xff,0xff,
                                         0x00,0x76,0x84,0xdf,0x00,0x00,0x00,0x00,0x00,0x00,
                                         0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
                                         0x00,0x00,0x00,0x00,0x20,0x4e,0x00,0x00,0x80,0xa8,
                                         0x12,0x01,0x0f,0x27,0x00,0x00,0xe0,0x4a,0x23,0x00,
                                         0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xeb,0x0e}
const uint8_t NAVPVTColdPayload[92] = {
  0x10,0x27,0x00,0x00,0xdf,0x07,0x0a,0x12,0x00,0x00,
  0x0a,0xf0,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,
  0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x98,0xbd,0xff,0xff,
  0xff,0xff,0xff,0xff,0x00,0x76,0x84,0xdf,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x4e,
  0x00,0x00,0x80,0xa8,0x12,0x01,0x0f,0x27,0x00,0x00,
  0xe0,0x4a,0x23,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00
}

// 32.16.13 UBX-MON-VER (0x0A 0x04)
// Poll receiver and software version - Returns MON-VER packet only - No ACK
const uint8_t host_reqMONVER[8]   = {0xb5,0x62,0x0a,0x04,0x00,0x00,0x0e,0x34}
// Receiver and software version
const uint8_t host_rcvMONVER[168] = {0xb5,0x62,0x0a,0x04,0xa0,0x00,0x52,0x4f,0x4d,0x20,
                                     0x43,0x4f,0x52,0x45,0x20,0x33,0x2e,0x30,0x31,0x20,
                                     0x28,0x31,0x30,0x37,0x38,0x38,0x38,0x29,0x00,0x00,
                                     0x00,0x00,0x00,0x00,0x00,0x00,0x30,0x30,0x30,0x38,
                                     0x30,0x30,0x30,0x30,0x00,0x00,0x46,0x57,0x56,0x45,
                                     0x52,0x3d,0x53,0x50,0x47,0x20,0x33,0x2e,0x30,0x31,
                                     0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
                                     0x00,0x00,0x00,0x00,0x00,0x00,0x50,0x52,0x4f,0x54,
                                     0x56,0x45,0x52,0x3d,0x31,0x38,0x2e,0x30,0x30,0x00,
                                     0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
                                     0x00,0x00,0x00,0x00,0x00,0x00,0x47,0x50,0x53,0x3b,
                                     0x47,0x4c,0x4f,0x3b,0x47,0x41,0x4c,0x3b,0x42,0x44,
                                     0x53,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
                                     0x00,0x00,0x00,0x00,0x00,0x00,0x53,0x42,0x41,0x53,
                                     0x3b,0x49,0x4d,0x45,0x53,0x3b,0x51,0x5a,0x53,0x53,
                                     0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
                                     0x00,0x00,0x00,0x00,0x00,0x00,0x41,0xd2}

//************ Not Supported ****************
// 32.16.10 UBX-MON-SMGR (0x0A 0x2E)
// Poll Synchronization manager status - Returns MON-SMGR packet only - No ACK
const uint8_t host_reqMONSMGR[8]   = {0xb5,0x62,0x0a,0x2e,0x00,0x00,0x38,0xb2}
// Synchronization manager status
const uint8_t host_rcvMONSMGR[24] = {

